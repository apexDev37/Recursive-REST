from unittest import TestCase

from unittest.mock import patch, MagicMock

from greetings.views import encode_credentials


class AuthenticationTestCase(TestCase):
  """
  Test case to test the auth flow process to acquire an
  access token for the grant type: "client credentials".
  """
  
  def setUp(self) -> None:
    self.client_id = 'test_id'
    self.client_secret = 'test_secret'
    self.credential = f'{self.client_id}:{self.client_secret}'
    
  @patch('greetings.views.base64.b64encode')
  def test_should_base64_encode_the_provided_client_id_and_secret(self, mock_b64_encode) -> None:
    # Given
    # generated by script: ./utility/scripts/oauth/encoder.py
    expected = 'dGVzdF9pZDp0ZXN0X3NlY3JldA=='
    
    # When
    mock_b64_encode.return_value.decode.return_value = expected
    actual = encode_credentials(self.client_id, self.client_secret)
    
    # Then
    self.assertIsInstance(actual, str)
    mock_b64_encode.assert_called_once_with(self.credential.encode('utf-8'))
    self.assertEqual(actual, expected)
